write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
## "C:\\rtools40\\usr\\bin\\make.exe"
install.packages("jsonlite", type = "source")
library(tidyverse)
library(tidyverse)
shiny::runApp('nss_projects/hmda_shiny-mr_goodbar/scripts/HMDA_shiny')
shiny::runApp('nss_projects/Shiny_Triathlon/triathlon')
runApp('nss_projects/Shiny_Triathlon/triathlon')
runApp('nss_projects/Shiny_Triathlon/triathlon')
runApp('nss_projects/Shiny_Triathlon/triathlon')
runApp('nss_projects/Shiny_Triathlon/triathlon')
runApp('nss_projects/Shiny_Triathlon/triathlon')
runApp('nss_projects/Shiny_Triathlon/triathlon')
runApp('nss_projects/Shiny_Triathlon/triathlon')
runApp('nss_projects/Shiny_Triathlon/triathlon')
runApp('nss_projects/Shiny_Triathlon/triathlon')
runApp('nss_projects/Shiny_Triathlon/triathlon')
runApp('nss_projects/Shiny_Triathlon/triathlon')
runApp('nss_projects/Shiny_Triathlon/triathlon')
?case_when
runApp('nss_projects/Shiny_Triathlon/triathlon')
shiny::runApp('nss_projects/Shiny_Triathlon/triathlon')
View(mytext_top_swim)
View(top_swim_perc)
runApp('nss_projects/Shiny_Triathlon/triathlon')
library(tidyverse)
library(ggplot2)
library(plotly)
test_dataset <- read.csv('../data/AEIM373-object_data_test.csv', check.names = T)
classification_cols <- test_dataset %>%
mutate(unosid = str_sub(Algorithm.Name, 10, 19)) %>%
select(unosid, contains('Positive.Classification'))%>%
rename_with(~ gsub(".Positive.Classification", "", .x, fixed = T), pos_class_cols)
total_cells <- as.numeric(nrow(classification_cols))
totals <- classification_cols %>%
summarise_at(2:ncol(classification_cols), sum)
percentages <- totals %>%
pivot_longer(cols = 1:ncol(totals), names_to = "markers", values_to = "total_positive") %>%
mutate(percentage_of_total = round((total_positive/total_cells)*100, 2)) %>%
select(markers, percentage_of_total) %>%
pivot_wider(names_from = markers, values_from = percentage_of_total)
plot_setup <- percentages %>%
select(GCG, SST, CPEP, GHRL)
plot_setup %>%
pivot_longer(1:ncol(plot_setup), names_to = 'markers', values_to = 'percentages') %>%
ggplot(aes(x=markers, y=percentages)) +
geom_col(position = 'stack') +
theme_minimal()+
labs(y = 'percentages (%)')
double_pos_occurances <- merge(test3, test3, by = 'ID', all = T) %>%
filter(name.x != name.y) %>%
group_by(name.x, name.y) %>%
summarise(val=n()) %>%
pivot_wider(names_from = name.y, values_from = val, values_fill = 0, names_sort = F) %>%
rename(markers = name.x)
test <- double_pos_occurances %>%
select(GCG, SST, CPEP, GHRL) %>%
ungroup()%>%
filter(markers %in% c('GCG', 'SST', 'CPEP', 'GHRL'))
test_dataset <- read.csv('../data/AEIM373-object_data_test.csv', check.names = T)
library(tidyverse)
library(ggplot2)
library(plotly)
test_dataset <- read.csv('../data/AEIM373-object_data_test.csv', check.names = T)
classification_cols <- test_dataset %>%
mutate(unosid = str_sub(Algorithm.Name, 10, 19)) %>%
select(unosid, contains('Positive.Classification'))%>%
rename_with(~ gsub(".Positive.Classification", "", .x, fixed = T), pos_class_cols)
total_cells <- as.numeric(nrow(classification_cols))
totals <- classification_cols %>%
summarise_at(2:ncol(classification_cols), sum)
percentages <- totals %>%
pivot_longer(cols = 1:ncol(totals), names_to = "markers", values_to = "total_positive") %>%
mutate(percentage_of_total = round((total_positive/total_cells)*100, 2)) %>%
select(markers, percentage_of_total) %>%
pivot_wider(names_from = markers, values_from = percentage_of_total)
plot_setup <- percentages %>%
select(GCG, SST, CPEP, GHRL)
plot_setup %>%
pivot_longer(1:ncol(plot_setup), names_to = 'markers', values_to = 'percentages') %>%
ggplot(aes(x=markers, y=percentages)) +
geom_col(position = 'stack') +
theme_minimal()+
labs(y = 'percentages (%)')
double_pos_occurances <- merge(test3, test3, by = 'ID', all = T) %>%
filter(name.x != name.y) %>%
group_by(name.x, name.y) %>%
summarise(val=n()) %>%
pivot_wider(names_from = name.y, values_from = val, values_fill = 0, names_sort = F) %>%
rename(markers = name.x)
test <- double_pos_occurances %>%
select(GCG, SST, CPEP, GHRL) %>%
ungroup()%>%
filter(markers %in% c('GCG', 'SST', 'CPEP', 'GHRL'))
test_dataset <- read.csv('../data/AEIM373-object_data_test.csv', check.names = T)
library(tidyverse)
library(ggplot2)
library(plotly)
test_dataset <- read.csv('../data/AEIM373-object_data_test.csv', check.names = T)
classification_cols <- test_dataset %>%
mutate(unosid = str_sub(Algorithm.Name, 10, 19)) %>%
select(unosid, contains('Positive.Classification'))%>%
rename_with(~ gsub(".Positive.Classification", "", .x, fixed = T), pos_class_cols)
total_cells <- as.numeric(nrow(classification_cols))
totals <- classification_cols %>%
summarise_at(2:ncol(classification_cols), sum)
percentages <- totals %>%
pivot_longer(cols = 1:ncol(totals), names_to = "markers", values_to = "total_positive") %>%
mutate(percentage_of_total = round((total_positive/total_cells)*100, 2)) %>%
select(markers, percentage_of_total) %>%
pivot_wider(names_from = markers, values_from = percentage_of_total)
plot_setup <- percentages %>%
select(GCG, SST, CPEP, GHRL)
plot_setup %>%
pivot_longer(1:ncol(plot_setup), names_to = 'markers', values_to = 'percentages') %>%
ggplot(aes(x=markers, y=percentages)) +
geom_col(position = 'stack') +
theme_minimal()+
labs(y = 'percentages (%)')
double_pos_occurances <- merge(test3, test3, by = 'ID', all = T) %>%
filter(name.x != name.y) %>%
group_by(name.x, name.y) %>%
summarise(val=n()) %>%
pivot_wider(names_from = name.y, values_from = val, values_fill = 0, names_sort = F) %>%
rename(markers = name.x)
test <- double_pos_occurances %>%
select(GCG, SST, CPEP, GHRL) %>%
ungroup()%>%
filter(markers %in% c('GCG', 'SST', 'CPEP', 'GHRL'))
test_dataset <- read.csv('../data/AEIM373-object_data_test.csv', check.names = T)
setwd("~/nss_projects/codex_halo_qc/notebooks")
library(tidyverse)
library(ggplot2)
library(plotly)
test_dataset <- read.csv('../data/AEIM373-object_data_test.csv', check.names = T)
classification_cols <- test_dataset %>%
mutate(unosid = str_sub(Algorithm.Name, 10, 19)) %>%
select(unosid, contains('Positive.Classification'))%>%
rename_with(~ gsub(".Positive.Classification", "", .x, fixed = T), pos_class_cols)
total_cells <- as.numeric(nrow(classification_cols))
totals <- classification_cols %>%
summarise_at(2:ncol(classification_cols), sum)
percentages <- totals %>%
pivot_longer(cols = 1:ncol(totals), names_to = "markers", values_to = "total_positive") %>%
mutate(percentage_of_total = round((total_positive/total_cells)*100, 2)) %>%
select(markers, percentage_of_total) %>%
pivot_wider(names_from = markers, values_from = percentage_of_total)
plot_setup <- percentages %>%
select(GCG, SST, CPEP, GHRL)
plot_setup %>%
pivot_longer(1:ncol(plot_setup), names_to = 'markers', values_to = 'percentages') %>%
ggplot(aes(x=markers, y=percentages)) +
geom_col(position = 'stack') +
theme_minimal()+
labs(y = 'percentages (%)')
double_pos_occurances <- merge(test3, test3, by = 'ID', all = T) %>%
filter(name.x != name.y) %>%
group_by(name.x, name.y) %>%
summarise(val=n()) %>%
pivot_wider(names_from = name.y, values_from = val, values_fill = 0, names_sort = F) %>%
rename(markers = name.x)
test <- double_pos_occurances %>%
select(GCG, SST, CPEP, GHRL) %>%
ungroup()%>%
filter(markers %in% c('GCG', 'SST', 'CPEP', 'GHRL'))
classification_cols <- test_dataset %>%
mutate(unosid = str_sub(Algorithm.Name, 10, 19)) %>%
select(unosid, contains('Positive.Classification'))%>%
rename_with(~ gsub(".Positive.Classification", "", .x, fixed = T), pos_class_cols)
test_dataset <- read.csv('../data/AEIM373-object_data_test.csv', check.names = T)
?rename_with
classification_cols <- test_dataset %>%
mutate(unosid = str_sub(Algorithm.Name, 10, 19)) %>%
select(unosid, contains('Positive.Classification'))%>%
rename_with(~ gsub(".Positive.Classification", "", .x, fixed = T))
classification_cols <- test_dataset %>%
mutate(unosid = str_sub(Algorithm.Name, 10, 19))
classification_cols <- test_dataset %>%
mutate(unosid = str_sub(Algorithm.Name, 10, 19)) %>%
select(unosid, contains('Positive.Classification'))%>%
rename_with(~ gsub(".Positive.Classification", "", .x, fixed = T))
View(classification_cols)
total_cells <- as.numeric(nrow(classification_cols))
totals <- classification_cols %>%
summarise_at(2:ncol(classification_cols), sum)
percentages <- totals %>%
pivot_longer(cols = 1:ncol(totals), names_to = "markers", values_to = "total_positive") %>%
mutate(percentage_of_total = round((total_positive/total_cells)*100, 2)) %>%
select(markers, percentage_of_total) %>%
pivot_wider(names_from = markers, values_from = percentage_of_total)
plot_setup <- percentages %>%
select(GCG, SST, CPEP, GHRL)
plot_setup %>%
pivot_longer(1:ncol(plot_setup), names_to = 'markers', values_to = 'percentages') %>%
ggplot(aes(x=markers, y=percentages)) +
geom_col(position = 'stack') +
theme_minimal()+
labs(y = 'percentages (%)')
double_pos_occurances <- merge(test3, test3, by = 'ID', all = T) %>%
filter(name.x != name.y) %>%
group_by(name.x, name.y) %>%
summarise(val=n()) %>%
pivot_wider(names_from = name.y, values_from = val, values_fill = 0, names_sort = F) %>%
rename(markers = name.x)
test3 <- classification_cols %>%
select(!unosid) %>% mutate(ID = row_number()) %>%
pivot_longer(-ID) %>%
filter(value != 0)
double_pos_occurances <- merge(test3, test3, by = 'ID', all = T) %>%
filter(name.x != name.y) %>%
group_by(name.x, name.y) %>%
summarise(val=n()) %>%
pivot_wider(names_from = name.y, values_from = val, values_fill = 0, names_sort = F) %>%
rename(markers = name.x)
View(double_pos_occurances)
test3 <- classification_cols %>%
select(!unosid) %>% mutate(ID = row_number()) %>%
pivot_longer(-ID) %>%
double_pos_occurances <- merge(test3, test3, by = 'ID', all = T) %>%
filter(name.x != name.y) %>%
group_by(name.x, name.y) %>%
summarise(val=n()) %>%
pivot_wider(names_from = name.y, values_from = val, values_fill = 0, names_sort = F) %>%
rename(markers = name.x)
test3 <- classification_cols %>%
select(!unosid) %>% mutate(ID = row_number()) %>%
pivot_longer(-ID)
View(test3)
View(totals)
double_pos_occurances <- merge(test3, test3, by = 'ID', all = T) %>%
group_by(name.x, name.y) %>%
summarise(val=n()) %>%
pivot_wider(names_from = name.y, values_from = val, values_fill = 0, names_sort = F) %>%
rename(markers = name.x)
double_pos_occurances <- merge(test3, test3, by = 'ID', all = T) %>%
filter(name.x != name.y) %>%
group_by(name.x, name.y) %>%
summarise(val=n()) %>%
pivot_wider(names_from = name.y, values_from = val, names_sort = F) %>%
rename(markers = name.x)
test <- classification_cols %>%
select(GCG, SST, CPEP, GHRL)
View(test)
?where
summarise(gcg_cpep_dp = sum(where(GCG == 1 & SST == 1)
select(GCG, SST, CPEP, GHRL) %>%
select(GCG, SST, CPEP, GHRL) %>%
test <- classification_cols %>%
select(GCG, SST, CPEP, GHRL) %>%
summarise(gcg_cpep_dp = sum(where(GCG == 1 & SST == 1)
